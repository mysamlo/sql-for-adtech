## Day 11 â€“ Window Functions (Part 2)

### Topics
- More window functions: `LAG()`, `LEAD()`, `SUM() OVER()`, `AVG() OVER()`
- Partitioning windows using `PARTITION BY`
- Calculating running totals and moving averages

### Ad Tech Relevance
Analyzing trends over time by comparing current performance to previous periods. Calculating running totals of spend or impressions. Identifying anomalies by looking at deviations from moving averages.

### Tools
- Continue exploring window function examples and documentation for your specific SQL dialect.
- Look for ad tech analysis examples using window functions.

### Practice Dataset
Use the `impressions.csv` dataset.

### Examples

**1. Finding the previous impression time for each user:**

```sql
SELECT impression_id, user_id, impression_time,
       LAG(impression_time, 1, NULL) OVER (PARTITION BY user_id ORDER BY impression_time) AS previous_impression_time
FROM impressions;
```

**2. Calculating a running total of impressions:**

```sql
SELECT impression_id, impression_time,
       COUNT(*) OVER (ORDER BY impression_time ROWS UNBOUNDED PRECEDING) AS running_total_impressions
FROM impressions;
```

**3. Calculating a moving average of viewability over the last 3 impressions:**

```sql
SELECT impression_id, impression_time, viewable,
       AVG(CAST(viewable AS REAL)) OVER (ORDER BY impression_time ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg_viewability
FROM impressions;
```

### Practice Questions

Using the `impressions.csv` dataset:

1.  For each `campaign_id`, find the `creative_id` of the next impression ordered by `impression_time`.
2.  Calculate the running total of clicks across all impressions ordered by `impression_time`.
3.  Find the difference in `impression_time` between the current and the previous impression for each `user_id`.
4.  Calculate a 3-day moving average of the number of impressions (you might need to work with the date part of `impression_time`).
5.  For each `campaign_id`, find the `user_id` who had the first impression.